#!/usr/bin/env python3

import os
import shutil
import subprocess

from time import sleep

class Node(object):
    def __init__(self, id):
        print(f'Starting {self.kind()} {id}...')
        self.id = id
        self.proc = subprocess.Popen( \
            args=f'java -jar ./build/libs/bft-smart-all.jar {self.kind()} {id}'.split(' '))
        sleep(1)

    def kind(self):
        raise NotImplementedError

    def terminate(self):
        self.proc.terminate()
        self.proc.wait()
        print(f'Shut down {self.kind()} {self.id}...')

    def wait(self):
        self.proc.wait()

class Replica(Node):
    def kind(self):
        return 'server'

class Client(Node):
    def kind(self):
        return 'client'

def main():
    # create dir for logs
    try:
        os.mkdir('log')
    except FileExistsError:
        shutil.rmtree('log')
        os.mkdir('log')

    # remove view file
    try:
        os.remove('config/currentView')
    except FileNotFoundError:
        ...

    # start replicas
    try:
        replicas = list(map(Replica, range(4)))
    except FileNotFoundError:
        print('Error! Run "./gradlew shadowJar" first.')
        return

    # start client
    try:
        client = Client(1001)
        client.wait()
    except FileNotFoundError:
        print('Error! Run "./gradlew shadowJar" first.')
    except KeyboardInterrupt:
        client.terminate()
    finally:
        print('Client shut down...')
        print('Shutting down replicas...')
        for replica in replicas:
            replica.terminate()

if __name__ == '__main__':
    main()
